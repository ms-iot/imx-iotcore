# Note: Some sections of this pipeline require access to prior builds and cannot
# run for pull request validation.

# Control Variables:
#   BUILD_FIRMWARE:true/false - Build new versions of the firmware binaries
#   BUILD_FFU:true/false - Build new FFUs
#   UPDATE_FIRMWARE:true/false - Update the firmware binaries before building new FFUs

trigger:
- public_preview

stages:
- stage: firmware_build_stage
  displayName: Firmware Build
  condition: eq(variables['BUILD_FIRMWARE'], 'true')
  jobs:
  - job: Build8
    displayName: Build iMX 8
    pool:
      vmImage: 'Ubuntu-16.04'
    strategy:
      matrix:
        NXPEVK_iMX8M_4GB:
          Target: NXPEVK_iMX8M_4GB
          AlternateName: MCIMX8M_EVK_4GB
        NXPEVK_iMX8M_Mini_2GB:
          Target: NXPEVK_iMX8M_Mini_2GB
          AlternateName: NXPEVK_iMX8M_Mini_2GB

    steps:
    - script: |
        echo '##vso[task.setvariable variable=ARTIFACTS_AVAILABLE]true'
      displayName: Check Artifact Availability
      condition: ne(variables['Build.Reason'], 'PullRequest')

    - script: |
        sudo apt-get update
        sudo apt-get install build-essential device-tree-compiler bison flex swig iasl uuid-dev wget git bc libssl-dev zlib1g-dev gcc g++ make python3 mono-devel
      displayName: Download tools

    - script: |
        sudo apt-get install python python-dev python-crypto python-wand python3-pip python3-setuptools
        sudo apt-get install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev wget libsqlite3-dev
      displayName: Install Python components

    - script: |
        pip install wheel
        pip3 install wheel
        pip3 install --upgrade setuptools
        pip3 uninstall crypto
        pip3 uninstall pycrypto
        pip install pycrypto
        pip3 install pycrypto
        pip3 install mu_environment

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '2.7' 
        addToPath: true
      name: python2Install

    # Don't add to the path, since that overwrites python2.x Path to python will be in $(python3Install.pythonLocation)
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.7' 
        addToPath: false
      name: python3Install

    - script: |
        wget https://releases.linaro.org/components/toolchain/binaries/7.2-2017.11/aarch64-linux-gnu/gcc-linaro-7.2.1-2017.11-x86_64_aarch64-linux-gnu.tar.xz
        tar xf gcc-linaro-7.2.1-2017.11-x86_64_aarch64-linux-gnu.tar.xz
      displayName: Download gcc

    - script: |
        pushd ..
        git clone --recursive -b imx_v2018.03_4.14.62_1.0.0_beta https://github.com/ms-iot/u-boot.git
        git clone -b codeaurora/imx_4.14.62_1.0.0_beta https://github.com/ms-iot/optee_os.git
        git clone --recursive https://github.com/ms-iot/mu_platform_nxp
        git clone -b imx_4.14.62_1.0.0_beta https://source.codeaurora.org/external/imx/imx-atf
        git clone -b imx_4.14.62_1.0.0_beta https://source.codeaurora.org/external/imx/imx-mkimage
        git clone https://github.com/Microsoft/MSRSec.git $(MSRSEC_BRANCH)
        popd
      displayName: Clone repos

    - script: |
        pushd ..
        wget https://www.nxp.com/lgfiles/NMG/MAD/YOCTO/firmware-imx-8.1.bin && \
        chmod +x firmware-imx-8.1.bin && \
        yes | ./firmware-imx-8.1.bin && \
        popd
      displayName: Install NXP HDMI/DDR firmware

    - script: |
        cd build/firmware
        make -f imx8.mk IMX8_TARGET=$(Target) imx8_u-boot \
            CROSS_COMPILE=$(Build.SourcesDirectory)/gcc-linaro-7.2.1-2017.11-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-
      displayName: Build U-Boot

    - script: |
        cd build/firmware
        make -f imx8.mk IMX8_TARGET=$(Target) imx8_atf \
            CROSS_COMPILE=$(Build.SourcesDirectory)/gcc-linaro-7.2.1-2017.11-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-
      displayName: Build ATF

    - script: |
        cd build/firmware
        make -f imx8.mk IMX8_TARGET=$(Target) imx8_optee \
            CROSS_COMPILE=$(Build.SourcesDirectory)/gcc-linaro-7.2.1-2017.11-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-
      displayName: Build OP-TEE

    - script: |
        cd build/firmware
        make -f imx8.mk IMX8_TARGET=$(Target) imx8_tas \
            CROSS_COMPILE=$(Build.SourcesDirectory)/gcc-linaro-7.2.1-2017.11-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-
      displayName: Build TAs

    - script: |
        cd build/firmware
        make -f imx8.mk IMX8_TARGET=$(Target) imx8_mkimage \
            CROSS_COMPILE=$(Build.SourcesDirectory)/gcc-linaro-7.2.1-2017.11-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-
      displayName: Build Imx-mkimage_uboot

    - script: |
        cd build/firmware
        make -f imx8.mk IMX8_TARGET=$(Target) imx8_uefi \
            CROSS_COMPILE=$(Build.SourcesDirectory)/gcc-linaro-7.2.1-2017.11-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu- \
            PYTHON3=$(python3Install.pythonLocation)/python
      displayName: Build UEFI

    - script: |
        cd build/firmware
        make -f imx8.mk IMX8_TARGET=$(Target) imx8_update-ffu \
            CROSS_COMPILE=$(Build.SourcesDirectory)/gcc-linaro-7.2.1-2017.11-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu- \
            PYTHON3=$(python3Install.pythonLocation)/python
      displayName: Move fimrware files to package folders

    - task: CopyFiles@2
      displayName: Copy firmware artifacts to staging directory
      inputs:
        contents: |
          $(Build.SourcesDirectory)/build/board/$(Target)/Package/BootFirmware/!(*.xml)
          $(Build.SourcesDirectory)/build/board/$(Target)/Package/BootLoader/!(*.xml)
        targetFolder: $(Build.ArtifactStagingDirectory)
        flattenFolders: false
      condition: and(succeeded(), eq(variables['ARTIFACTS_AVAILABLE'], 'true'))

    - task: CopyFiles@2
      displayName: Copy TAs to staging directory
      inputs:
        contents: |
          $(Build.SourcesDirectory)/../mu_platform_nxp/Microsoft/OpteeClientPkg/Bin/AuthvarsTa/Arm64/Test/*.ta
          $(Build.SourcesDirectory)/../mu_platform_nxp/Microsoft/OpteeClientPkg/Bin/AuthvarsTa/Arm64/Test/*.elf
          $(Build.SourcesDirectory)/../mu_platform_nxp/Microsoft/OpteeClientPkg/Bin/fTpmTa/Arm64/Test/*.ta
          $(Build.SourcesDirectory)/../mu_platform_nxp/Microsoft/OpteeClientPkg/Bin/fTpmTa/Arm64/Test/*.elf
        targetFolder: $(Build.ArtifactStagingDirectory)
        flattenFolders: true
      condition: and(succeeded(), eq(variables['ARTIFACTS_AVAILABLE'], 'true'))

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: $(Build.ArtifactStagingDirectory)
        artifactName: $(Target)_firmware

  - job: Build67
    displayName: Build iMX 6 & 7
    pool:
      vmImage: 'Ubuntu-16.04'
    strategy:
      matrix:
        ClSomImx7_iMX7D_1GB:
          Target: ClSomImx7_iMX7D_1GB
        EVK_iMX6ULL_512MB:
          Target: EVK_iMX6ULL_512MB
        HummingBoardEdge_iMX6DL_1GB:
          Target: HummingBoardEdge_iMX6DL_1GB
        HummingBoardEdge_iMX6Q_2GB:
          Target: HummingBoardEdge_iMX6Q_2GB
        HummingBoardEdge_iMX6S_512MB:
          Target: HummingBoardEdge_iMX6S_512MB
        Sabre_iMX6Q_1GB:
          Target: Sabre_iMX6Q_1GB
        Sabre_iMX6QP_1GB:
          Target: Sabre_iMX6QP_1GB
        Sabre_iMX6SX_1GB:
          Target: Sabre_iMX6SX_1GB
        Sabre_iMX7D_1GB:
          Target: Sabre_iMX7D_1GB
        SabreLite_iMX6Q_1GB:
          Target: SabreLite_iMX6Q_1GB
        UdooNeo_iMX6SX_1GB:
          Target: UdooNeo_iMX6SX_1GB
        VAB820_iMX6Q_1GB:
          Target: VAB820_iMX6Q_1GB

    steps:
    - script: |
        echo '##vso[task.setvariable variable=ARTIFACTS_AVAILABLE]true'
      displayName: Check Artifact Availability
      condition: ne(variables['Build.Reason'], 'PullRequest')

    - script: |
        sudo apt-get update
        sudo apt-get install build-essential python python-dev python-crypto python-wand device-tree-compiler bison flex swig iasl uuid-dev wget git bc libssl-dev python3-pyelftools
      displayName: Download tools

    - script: |
        wget https://releases.linaro.org/components/toolchain/binaries/6.4-2017.11/arm-linux-gnueabihf/gcc-linaro-6.4.1-2017.11-x86_64_arm-linux-gnueabihf.tar.xz
        tar xf gcc-linaro-6.4.1-2017.11-x86_64_arm-linux-gnueabihf.tar.xz
      displayName: Download gcc


    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: specific
        project: 'a0a9e539-5c45-490f-83c8-289a6ed8234e'
        definition: 41039
        buildVersionToDownload: specific
        pipelineId: 16732832
        artifactName: Cst
        path: '$(System.ArtifactsDirectory)'
        specificBuildWithTriggering: true
      displayName: Download CST
      continueOnError: true
      condition: and(succeeded(), eq(variables['ARTIFACTS_AVAILABLE'], 'true'))

    - script: |
        pushd ..
        tar xf $(System.ArtifactsDirectory)/cst.tar.gz && \
        rm $(System.ArtifactsDirectory)/cst.tar.gz
      displayName: Extract CST
      condition: and(succeeded(), eq(variables['ARTIFACTS_AVAILABLE'], 'true'))

    # Branches are set using pipeline variables to allow overriding known build breaks (mostly useful for EDK2)
    # The variables can be set at queue time to allow custom runs.
    # ex: EDK2_BRANCH = --branch imx-iotcore-v1.0.0
    - script: |
        pushd ..
        git clone https://github.com/ms-iot/imx-edk2-platforms.git $(EDK2_PLATFORMS_BRANCH)
        git clone --recursive -b u-boot-imx https://github.com/ms-iot/u-boot.git $(UBOOT_BRANCH)
        git clone https://github.com/ms-iot/optee_os.git $(OPTEE_BRANCH)
        git clone --recursive https://github.com/Microsoft/RIoT.git $(RIOT_BRANCH)
        git clone https://github.com/Microsoft/MSRSec.git $(MSRSEC_BRANCH)
        git clone --recursive https://github.com/ms-iot/edk2 $(EDK2_BRANCH)
        popd
      displayName: Clone repos


    # Builds all components except the final HAB signed SPL
    - script: |
        echo build/firmware/$(Target)
        ls
        cd build/firmware/$(Target)
        make u-boot optee CROSS_COMPILE=$(Build.SourcesDirectory)/gcc-linaro-6.4.1-2017.11-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-
      displayName: Build U-Boot + OP-TEE

    - script: |
        echo build/firmware/$(Target)
        ls
        cd build/firmware/$(Target)
        make update_tas CROSS_COMPILE=$(Build.SourcesDirectory)/gcc-linaro-6.4.1-2017.11-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-
      displayName: Build TAs

    - script: |
        echo build/firmware/$(Target)
        ls
        cd build/firmware/$(Target)
        make uefi_fit CROSS_COMPILE=$(Build.SourcesDirectory)/gcc-linaro-6.4.1-2017.11-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-
      displayName: Build UEFI

    - script: |
        cd build/firmware/$(Target)
        make CROSS_COMPILE=$(Build.SourcesDirectory)/gcc-linaro-6.4.1-2017.11-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-
        make update-ffu
      displayName: Full firmware build (Only available with CST)
      condition: and(succeeded(), eq(variables['ARTIFACTS_AVAILABLE'], 'true'))

    - script: |	
        echo build/firmware/$(Target)	
        ls	
        cd build/firmware/$(Target)	
        make image.fit CROSS_COMPILE=$(Build.SourcesDirectory)/gcc-linaro-6.4.1-2017.11-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-	
      displayName: Initial FIT packaging (Non-CST alternative)
      condition: and(succeeded(), ne(variables['ARTIFACTS_AVAILABLE'], 'true'))

    - task: CopyFiles@2
      displayName: Copy firmware artifacts to staging directory  (Only available with CST)
      inputs:
        contents: |
          $(Build.SourcesDirectory)/build/board/$(Target)/export-ta_arm32.tar.bz2
          $(Build.SourcesDirectory)/build/board/$(Target)/Package/BootFirmware/!(*.xml)
          $(Build.SourcesDirectory)/build/board/$(Target)/Package/BootLoader/!(*.xml)
          $(Build.SourcesDirectory)/build/firmware/$(Target)/ftpm/*.ta
          $(Build.SourcesDirectory)/build/firmware/$(Target)/ftpm/*.elf
          $(Build.SourcesDirectory)/build/firmware/$(Target)/authvars/*.ta
          $(Build.SourcesDirectory)/build/firmware/$(Target)/authvars/*.elf
        targetFolder: $(Build.ArtifactStagingDirectory)
        flattenFolders: false
      condition: and(succeeded(), eq(variables['ARTIFACTS_AVAILABLE'], 'true'))

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: $(Build.ArtifactStagingDirectory)
        artifactName: $(Target)_firmware
      condition: and(succeeded(), eq(variables['ARTIFACTS_AVAILABLE'], 'true'))

    - task: ComponentGovernanceComponentDetection@0

# Implicit dependency on firmware_build_stage due to ordering in file.
# Only available for scheduled/manual builds due to a dependency on the collateral build.
- stage: ffu_build_stage
  displayName: FFU Build
  condition: and(eq(variables['BUILD_FFU'], 'true'), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - job: BuildFFU
    displayName: Build i.MX FFU
    pool:
      vmImage: 'vs2017-win2016'
    strategy:
      matrix:
        NXPEVK_iMX8M_Mini_2GB:
          Target: NXPEVK_iMX8M_Mini_2GB
          Arch: ARM64
        NXPEVK_iMX8M_4GB:
          Target: NXPEVK_iMX8M_4GB
          Arch: ARM64
        ClSomImx7_iMX7D_1GB:
          Target: ClSomImx7_iMX7D_1GB
          Arch: ARM
        EVK_iMX6ULL_512MB:
          Target: EVK_iMX6ULL_512MB
          Arch: ARM
        HummingBoardEdge_iMX6DL_1GB:
          Target: HummingBoardEdge_iMX6DL_1GB
          Arch: ARM
        HummingBoardEdge_iMX6Q_2GB:
          Target: HummingBoardEdge_iMX6Q_2GB
          Arch: ARM
        HummingBoardEdge_iMX6S_512MB:
          Target: HummingBoardEdge_iMX6S_512MB
          Arch: ARM
        Sabre_iMX6Q_1GB:
          Target: Sabre_iMX6Q_1GB
          Arch: ARM
        Sabre_iMX6QP_1GB:
          Target: Sabre_iMX6QP_1GB
          Arch: ARM
        Sabre_iMX6SX_1GB:
          Target: Sabre_iMX6SX_1GB
          Arch: ARM
        Sabre_iMX7D_1GB:
          Target: Sabre_iMX7D_1GB
          Arch: ARM
        SabreLite_iMX6Q_1GB:
          Target: SabreLite_iMX6Q_1GB
          Arch: ARM
        UdooNeo_iMX6SX_1GB:
          Target: UdooNeo_iMX6SX_1GB
          Arch: ARM
        VAB820_iMX6Q_1GB:
          Target: VAB820_iMX6Q_1GB
          Arch: ARM

    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: '$(Target)_firmware'
        downloadPath: '$(System.ArtifactsDirectory)'
      condition: and(succeeded(), eq(variables['UPDATE_FIRMWARE'], 'true'))

    - task: CopyFiles@2
      inputs:
        sourceFolder: $(System.ArtifactsDirectory)/$(Target)_firmware
        targetFolder: $(Build.SourcesDirectory)
        contents: '**'
        overWrite: true
      condition: and(succeeded(), eq(variables['UPDATE_FIRMWARE'], 'true'))

    - task: PowerShell@2
      displayName: 'Download ADK 1809 from MSDN'
      inputs:
        targetType: 'inline'
        script: |
          $url = "https://go.microsoft.com/fwlink/?linkid=2026036"
          $output = "adksetup.exe"
          $start_time = Get-Date
          Invoke-WebRequest -Uri $url -OutFile $(Build.SourcesDirectory)/$output
          Write-Output "Time taken: $((Get-Date).Subtract($start_time).Seconds) second(s)"

    - task: PowerShell@2
      displayName: 'Install ADK 1809'
      inputs:
        targetType: 'inline'
        script: 'Start-Process .\adksetup.exe -ArgumentList "/quiet" -wait' 

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'specific'
        project: 'a0a9e539-5c45-490f-83c8-289a6ed8234e'
        pipeline: '41039'
        buildVersionToDownload: 'specific'
        buildId: 16732832
        downloadType: 'single'
        artifactName: 'BuildCollaterals'
        specificBuildWithTriggering: true
        downloadPath: '$(System.ArtifactsDirectory)'

    - task: PowerShell@2
      displayName: 'Install $(Arch) IoT Core Packages'
      inputs:
        targetType: 'inline'
        script: |
          $msiPath = "$(System.ArtifactsDirectory)\BuildCollaterals\Windows_10_IoT_Core_$(Arch)_Packages.msi"
          dir $msiPath
          Start-Process msiexec.exe -ArgumentList @("/i $msiPath", "/quiet", "/qn", "/L*V `"$(Build.SourcesDirectory)\msi.log`"") -wait

    - task: PowerShell@2
      displayName: 'Verify Kit Installation'
      inputs:
        targetType: 'inline'
        script: |
          dir "C:\Program Files (x86)\Windows Kits\10\MSPackages\retail\$(Arch)\fre"
          dir "C:\Program Files (x86)\Windows Kits\10\Assessment and Deployment Kit"

    - task: PowerShell@2
      displayName: 'Install Test Certificates'
      inputs:
        targetType: 'inline'
        script: |
          dir $(Build.SourcesDirectory)
          cmd.exe /c '$(Build.SourcesDirectory)\build\tools\SetupCertificate.bat'

    - script: |
        git submodule init
        git submodule update
      displayName: 'Download submodules'

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $batfile = 
          @"
          set BATCH_HOME=%~dp0
          call ..\..\..\tools\SetupBuildEnv.bat
          cd /d %BATCH_HOME%
          call BuildImage $(Target) $(Target)_TestOEMInput.xml
          "@
          $batfile | Out-File -FilePath $(Build.SourcesDirectory)\build\solution\iMXPlatform\GenerateTestFFU\GenerateFFU.bat -Encoding ascii

    - script: |
        cat $(Build.SourcesDirectory)\build\solution\iMXPlatform\GenerateTestFFU\GenerateFFU.bat

    - task: VSBuild@1
      inputs:
        solution: '**\*.sln'
        vsVersion: '15.0'
        platform: '$(Arch)'
        configuration: 'Release'
        createLogFile: true
        logFileVerbosity: 'diagnostic'

    - task: PublishSymbols@2
      inputs:
        symbolsFolder: '$(Build.SourcesDirectory)\build\solution\iMXPlatform'
        SearchPattern: '**\*.pdb'
        IndexSources: true
        PublishSymbols: true
        SymbolServerType: 'TeamServices'

    - task: CopyFiles@2
      inputs:
        contents: '$(Build.SourcesDirectory)\**\*.ffu'
        targetFolder: $(Build.ArtifactStagingDirectory)\FFU
        flattenFolders: true

    - task: PowerShell@2
      displayName: 'Check Artifact Directory'
      inputs:
        targetType: 'inline'
        script: |
          dir $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: $(Build.ArtifactStagingDirectory)\FFU
        artifactName: $(Target)_ReleaseFFU
      displayName: Publish FFU

    - task: CopyFiles@2
      inputs:
        contents: '$(Build.SourcesDirectory)\build\solution\iMXPlatform\Build\FFU\bspcabs\**\*.cab'
        targetFolder: $(Build.ArtifactStagingDirectory)\cabs\$(Target)_cabs
        flattenFolders: false

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: $(Build.ArtifactStagingDirectory)\cabs
        artifactName: ReleaseCabs
      displayName: Publish Cabs


