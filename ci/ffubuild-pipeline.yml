trigger:
- public_preview

jobs:
  - job: Build67
    displayName: Build i.MX FFU
    pool:
      vmImage: 'vs2017-win2016'
    strategy:
      matrix:
        NXPEVK_iMX8M_Mini_2GB:
          Target: NXPEVK_iMX8M_Mini_2GB
          Arch: ARM64
        NXPEVK_iMX8M_4GB:
          Target: NXPEVK_iMX8M_4GB
          Arch: ARM64
        ClSomImx7_iMX7D_1GB:
          Target: ClSomImx7_iMX7D_1GB
          Arch: ARM
        EVK_iMX6ULL_512MB:
          Target: EVK_iMX6ULL_512MB
          Arch: ARM
        HummingBoardEdge_iMX6DL_1GB:
          Target: HummingBoardEdge_iMX6DL_1GB
          Arch: ARM
        HummingBoardEdge_iMX6Q_2GB:
          Target: HummingBoardEdge_iMX6Q_2GB
          Arch: ARM
        HummingBoardEdge_iMX6S_512MB:
          Target: HummingBoardEdge_iMX6S_512MB
          Arch: ARM
        Sabre_iMX6Q_1GB:
          Target: Sabre_iMX6Q_1GB
          Arch: ARM
        Sabre_iMX6QP_1GB:
          Target: Sabre_iMX6QP_1GB
          Arch: ARM
        Sabre_iMX6SX_1GB:
          Target: Sabre_iMX6SX_1GB
          Arch: ARM
        Sabre_iMX7D_1GB:
          Target: Sabre_iMX7D_1GB
          Arch: ARM
        SabreLite_iMX6Q_1GB:
          Target: SabreLite_iMX6Q_1GB
          Arch: ARM
        UdooNeo_iMX6SX_1GB:
          Target: UdooNeo_iMX6SX_1GB
          Arch: ARM
        VAB820_iMX6Q_1GB:
          Target: VAB820_iMX6Q_1GB
          Arch: ARM

    steps:
    - task: PowerShell@2
      displayName: 'Download ADK 1809 from MSDN'
      inputs:
        targetType: 'inline'
        script: |
          $url = "https://go.microsoft.com/fwlink/?linkid=2026036"
          $output = "adksetup.exe"
          $start_time = Get-Date
          Invoke-WebRequest -Uri $url -OutFile $(Build.SourcesDirectory)/$output
          Write-Output "Time taken: $((Get-Date).Subtract($start_time).Seconds) second(s)"

    - task: PowerShell@2
      displayName: 'Install ADK 1809'
      inputs:
        targetType: 'inline'
        script: 'Start-Process .\adksetup.exe -ArgumentList "/quiet" -wait' 

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'specific'
        project: 'a0a9e539-5c45-490f-83c8-289a6ed8234e'
        pipeline: '41039'
        buildVersionToDownload: 'latest'
        downloadType: 'single'
        artifactName: 'BuildCollaterals'
        downloadPath: '$(System.ArtifactsDirectory)'

    - task: PowerShell@2
      displayName: 'Install $(Arch) IoT Core Packages'
      inputs:
        targetType: 'inline'
        script: |
          $msiPath = "$(System.ArtifactsDirectory)\BuildCollaterals\Windows_10_IoT_Core_$(Arch)_Packages.msi"
          dir $msiPath
          Start-Process msiexec.exe -ArgumentList @("/i $msiPath", "/quiet", "/qn", "/L*V `"$(Build.SourcesDirectory)\msi.log`"") -wait

    - task: PowerShell@2
      displayName: 'Verify Kit Installation'
      inputs:
        targetType: 'inline'
        script: |
          dir "C:\Program Files (x86)\Windows Kits\10\MSPackages\retail\$(Arch)\fre"
          dir "C:\Program Files (x86)\Windows Kits\10\Assessment and Deployment Kit"

    - task: PowerShell@2
      displayName: 'Install Test Certificates'
      inputs:
        targetType: 'inline'
        script: |
          dir $(Build.SourcesDirectory)
          cmd.exe /c '$(Build.SourcesDirectory)\build\tools\SetupCertificate.bat'

    - script: |
        git submodule init
        git submodule update
      displayName: 'Download submodules'

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $batfile = 
          @"
          set BATCH_HOME=%~dp0
          call ..\..\..\tools\SetupBuildEnv.bat
          cd /d %BATCH_HOME%
          call BuildImage $(Target) $(Target)_TestOEMInput.xml
          "@
          $batfile | Out-File -FilePath $(Build.SourcesDirectory)\build\solution\iMXPlatform\GenerateTestFFU\GenerateFFU.bat -Encoding ascii

    - script: |
        cat $(Build.SourcesDirectory)\build\solution\iMXPlatform\GenerateTestFFU\GenerateFFU.bat

    - task: VSBuild@1
      inputs:
        solution: '**\*.sln'
        vsVersion: '15.0'
        platform: '$(Arch)'
        configuration: 'Release'
        createLogFile: true
        logFileVerbosity: 'diagnostic'

    - task: CopyFiles@2
      inputs:
        contents: '$(Build.SourcesDirectory)\**\*.ffu'
        targetFolder: $(Build.ArtifactStagingDirectory)\Release
        flattenFolders: true

    - task: PowerShell@2
      displayName: 'Check Artifact Directory'
      inputs:
        targetType: 'inline'
        script: |
          dir $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: $(Build.ArtifactStagingDirectory)\Release
        artifactName: $(Target)_ReleaseFFU
